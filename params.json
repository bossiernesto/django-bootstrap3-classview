{"name":"Django-bootstrap3-classview","tagline":"Django Bootstrap 3 template project with class view feature","body":"Django Bootstrap 3 Boilerplate\r\n===========================\r\n\r\nDjango Bootstrap 3 template project with class view feature\r\n\r\nCurrent stable version: 0.0.2\r\n\r\n## Introduction\r\n\r\nThis project makes you to create a simple django project with Bootstrap 3 with minimal effort and with some common utils\r\nfor you project.\r\n\r\n### Features\r\n\r\n* Class oriented views.\r\n* Simple Project creation with a single command line.\r\n* Base classes for views, models and services with common methods for simpler usage of project classes.\r\n\r\n## Instalation\r\n\r\nInstalling Django Bootstrap is pretty straight forward, but some requirements must be made to be able to use this project:\r\n\r\nPython 2.7\r\n\r\n> **note**\r\n>\r\n> For future versions, the project will be Python 3.3+ compatible.\r\n\r\nSome more requirements are also needed but are resolved on installed via pip, with the following command:\r\n\r\n```python\r\npip install django-classview-bootstrap3\r\n```\r\n\r\nIf you're installing with the targ.gz or zip distribution, you'll need to have these requirements installed in your python enviroment:\r\n\r\n* django >= 1.6\r\n* django_conventions\r\n* django-webtest\r\n* south\r\n* dj_database_url\r\n* simplejson\r\n\r\nyou can get them with the following command, after you have the project uncompressed:\r\n\r\n```python\r\npip install -r requirements.txt\r\n```\r\n\r\n## Creating a project\r\n\r\nCreating a project is pretty simple, just issue the following command on your shell:\r\n\r\n\r\n\r\n```python\r\npython start_bootstrap_project <your_project_name>\r\n```\r\nor\r\n\r\n```python\r\n./start_bootstrap_project <your_project_name>\r\n```\r\n\r\nThis command will create a project with the name passed as parameter. If no name has been issued with the command, expect\r\nthe following output with this error:\r\n\r\n![IMAGE](/doc/images/no_project_name.png)\r\n\r\nIf the name of the project exists as a directory where you're issuing the command, expect the following output:\r\n\r\n![IMAGE](/doc/images/existing_project_name.png)\r\n\r\nOtherwise the project will be created as follows (using testapp as the project name):\r\n\r\n![IMAGE](/doc/images/correct_project_name.png)\r\n\r\n## Base Model and extension\r\n\r\nThe boilerplate project comes with a Base Model class, with the following structure:\r\n\r\n```python\r\nclass BaseEntity(models.Model):\r\n\r\n    created_at = models.DateTimeField(null=True, blank=True)\r\n    updated_at = models.DateTimeField(null=True, blank=True)\r\n```\r\n\r\nThis class comes with two methods, fields and update_fields. The first one will get all the attributes excepting the\r\nprivate attributes (the ones starting with _). The latter method will get the same attributes excepting the fields\r\nincluded in NOT_IN_FIELDS, this constant is a list (by default this list is empty).\r\n\r\nTo be able to extend you models with these base class, just extend this base class as showed in the next example:\r\n\r\n```python\r\nfrom django_bootstrap3view_app.models import BaseEntity\r\nfrom django.db import models\r\n\r\nclass Person(BaseEntity):\r\n\r\n    SEX_CHOICES = (\r\n        ('Male','M'),\r\n        ('Female','F'),\r\n    )\r\n\r\n    age = models.IntegerField(null=True)\r\n    name = models.CharField(max_length=250, null=True, blank=True)\r\n    sex = models.CharField(max_length=2, choices=\r\n```\r\n\r\n## View classes and extensions\r\n\r\n\r\n\r\n## Service base class and extension\r\n\r\nService classes can be seen as classes that are between the model and the view and act like interfaces for a model class.\r\nFor this, we have a base class for the services that will form part of the models.\r\n\r\nThe base class has methods such as all (that will get all the objects for the entity), get_one (that will get the first\r\nobject based on the filter attributes passed as args or kwargs), _get_or_new (that based on a dictionary passed as parameter\r\nit'll get the object with those attributes or create an entity if no object has been found)\r\n\r\nFor more references for the base Service class see the section Reference of Service Class\r\n\r\n### Extending Service Class\r\n\r\nTo create a service class based on the base one, just follow the next example:\r\n\r\n```python\r\nfrom my_bootstrap_app.models import Person\r\nfrom django_bootstrap3view_app.services.base import BaseService\r\n\r\nclass PersonService(BaseService):\r\n\r\n    entity = Person\r\n\r\n    #define methods for you service.\r\n\r\n```\r\n\r\n### Reference for Service Class\r\n\r\nTBA\r\n\r\n","google":"UA-48343335-1","note":"Don't delete this file! It's used internally to help with page regeneration."}